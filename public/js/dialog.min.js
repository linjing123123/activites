/* 
 * 2018.8.21 新增方法(仅适用于$.alert方法) 
 * 强制对全局开放弹窗对象
 * 外部可以通过$.alert_box获取弹窗对象
 * 如执行$.alert_box.close()或$.alert_box.hide()可以将弹窗关闭
 * 
 */
(function(root, factory) {
	
	if (typeof define === "function" && define.amd) {
		define(["$"], factory)
	} else {
		if (typeof exports === "object") {
			module.exports = factory()
		} else {
			root.Dialog = factory(window.Zepto || window.jQuery || $)
		}
	}
})(this, function($) {

	// 防止关闭弹窗以后 body回到dingbu
	var Fixedtop
	function ifFixed(fixedFlag) {
		if(fixedFlag){
			Fixedtop = window.scrollY
			document.body.style.position = 'fixed'
			document.body.style.top = -Fixedtop + 'px'
		}else{
			document.body.style.position = 'initial'
			document.body.style.top = 0
			window.scrollTo(0, Fixedtop)
		}
	}

	$.fn.Dialog = function(settings) {
		var list = [];
		$(this).each(function() {
			var dialog = new Dialog();
			var options = $.extend({
				trigger: $(this)
			}, settings);
			dialog.init(options);
			list.push(dialog)
		});
		return list
	};
	$.Dialog = function(settings) {
		if (settings.type === "alert") {
			var alert = new Dialog();
			$.alert_box = alert;
			$.alert_box.close = $.alert_box.dispose;
			var html = '<div class="ui-alert-title">' + settings.content + "</div>";
			var action = "";
			if (settings.button) {
				if (typeof settings.button == "boolean") {
					settings.button = "确定"
				}
				action = '<p class="ui-dialog-action"><button class="ui-alert-submit  js-dialog-close">' + settings.button + "</button></p>"
			} else {
				if (!settings.timer) {
					settings.timer = 2500
				}
			}
			html += action;
			var alertOptions = $.extend({
				target: html,
				animate: true,
				show: true,
				mask: true,
				className: "ui-alert",
				afterHide: function(c) {
					this.dispose();
					settings.callback && settings.callback()
				}
			}, settings);
			alert.init(alertOptions);
			if (settings.timer) {
				setTimeout(function() {
					alert.dispose();
					settings.callback && settings.callback()
				}, settings.timer)
			}
		}
		if (settings.type === "confirm") {
			var dialog = new Dialog();
			var html = '<div class="ui-confirm-title">' + settings.content + "</div>";
			var action = "";
			if (!settings.buttons) {
				settings.buttons = [{
					"no": "取消"
				}, {
					"yes": "确定"
				}]
			}
			var btnstr = "";
			for (var i = 0, l = settings.buttons.length; i < l; i++) {
				var item = settings.buttons[i];
				if (item.no) {
					btnstr += '<td><button class="ui-confirm-no" data-type="no">' + item.no + "</button></td>"
				}
				if (item.yes) {
					btnstr += '<td><button class="ui-confirm-submit " data-type="yes">' + item.yes + "</button></td>"
				}
				if (item.close) {
					btnstr += '<td><button class="ui-confirm-close js-dialog-close" data-type="close">' + item.close + "</button></td>"
				}
			}
			action = '<table class="ui-dialog-action"><tr>' + btnstr + "</tr></table>";
			// html += action;
			if(settings.btnOverturn) {
				html = action + html;
			} else {
				html += action;
			}
			var options = $.extend({
				target: html,
				animate: true,
				show: true,
				fixed: true,
				mask: true,
				className: "ui-alert",
				afterHide: function(c) {
					this.dispose()
				},
				beforeShow: function(c) {
					dialog.touch($(".ui-confirm-submit", c), function() {
						settings.callback && settings.callback.call(dialog, "yes", c)
					});
					dialog.touch($(".ui-confirm-no", c), function() {
						settings.callback && settings.callback.call(dialog, "no", c)
					});
					dialog.touch($(".ui-confirm-close", c), function() {
						settings.callback && settings.callback.call(dialog, "close", c)
					})
				}
			}, settings);
			dialog.init(options)
		}
		if (settings.type === "collect") {
			var dialog = new Dialog();
			var nDate = new Date();

			var imgsrc = "/src/m7.0/images/dialog/"+(settings.imgType?settings.imgType:1)+".png";
			var html = '<img class="imgblock" src="'+imgsrc+'?v='+(nDate.getFullYear()+''+(nDate.getMonth()+1))+'"/>' +
						'<div class="collectlogin">' + settings.content + "</div>";
			var action = "";
			if (!settings.buttons) {
				settings.buttons = [{
					"no": "取消"
				}, {
					"yes": "立即登录"
				}]
			}
			var btnstr = '';
			for (var i = 0, l = settings.buttons.length; i < l; i++) {
				var item = settings.buttons[i];
				if (item.no) {
					btnstr += '<button class="ui-confirm-no" data-type="no">' + item.no + "</button>"
				}
				if (item.yes) {
					btnstr += '<button class="ui-confirm-submit " data-type="yes">' + item.yes + "</button>"
				}
			}
			action = '<div class="alertBtn ui-dialog-action">' + btnstr + "</div>";
			
				// <input id="alertBtn2" type="button" value="取消">
				// <input id="alertBtn1" type="button" value="立即登录">
			
			html += action;
			var options = $.extend({
				target: html,
				animate: true,
				show: true,
				closeTpl: false,
				fixed: true,
				boxStyle: 'display:block;width:5.8rem;height:auto;text-align:center;border-radius: 0.2rem;',
				rmClass: true,
				noSetPosition: true,
				mask: true,
				className: "alertBoxCollect collect-login",
				afterHide: function(c) {
					this.dispose();
					ifFixed(false);
				},
				beforeShow: function(c) {
					dialog.touch($(".ui-confirm-submit", c), function() {
						settings.callback && settings.callback.call(dialog, "yes", c)
					});
					dialog.touch($(".ui-confirm-no", c), function() {
						settings.callback && settings.callback.call(dialog, "no", c)
					});
				}
			}, settings);
			dialog.init(options);
			ifFixed(true);
		}
	};
	$.alert = function(content, button, callback, timer, settings) {
		$(".ui-dialog-mask,.ui-dialog-bgb").remove();
		if(typeof(button)==='number'){
			timer = button;
			button = '';
		}
		var options = {};
		var defaults = {
			zIndex: 100,
			type: "alert"
		};
		if (typeof content == "object") {
			options = $.extend(defaults, content)
		} else {
			options = $.extend(defaults, {
				content: content,
				button: button,
				timer: timer,
				callback: callback
			})
		}
		$.Dialog($.extend(options, settings))
	};
	$.confirm = function(content, buttons, callback, settings) {
		var options = {};
		var defaults = {
			zIndex: 100,
			type: "confirm"
		};
		if (typeof content == "object") {
			options = $.extend(defaults, content)
		} else {
			options = $.extend(defaults, {
				content: content,
				buttons: buttons,
				callback: callback
			})
		}
		$.Dialog($.extend(options, settings))
	};
	$.collect = function(content, buttons, callback, settings) {
		var options = {};
		var defaults = {
			zIndex: 1000,
			type: "collect"
		};
		if (typeof content == "object") {
			options = $.extend(defaults, content)
		} else {
			options = $.extend(defaults, {
				content: content,
				buttons: buttons,
				callback: callback
			})
		}
		$.Dialog($.extend(options, settings))
	};
	$.newconfirm = function(content, buttons, callback, settings) {
		var options = {};
		var defaults = {
			zIndex: 1000,
			type: "collect"
		};
		if (typeof content == "object") {
			options = $.extend(defaults, content)
		} else {
			options = $.extend(defaults, {
				content: content,
				buttons: buttons,
				callback: callback
			})
		}
		$.Dialog($.extend(options, settings))
	};

	var Dialog = function() {
			var rnd = Math.random().toString().replace(".", "");
			this.id = "dialog_" + rnd;
			this.settings = {};
			this.settings.closeTpl = $('<span class="ui-dialog-close js-dialog-close">x</span>');
			this.settings.titleTpl = $('<div class="ui-dialog-title"></div>');
			this.timer = null;
			this.showed = false;
			this.mask = $()
		};
	Dialog.prototype = {
		init: function(settings) {
			var _this = this;
			this.settings = $.extend({
				fixed: false,
				noSetPosition: false,
			}, this.settings, settings);
			
			if (this.settings.mask) {
				this.mask = $('<div class="ui-dialog-mask"/>');
				$("body").append(this.mask)
			}
			$("body").append('<div class="'+(this.settings.rmClass?'':'ui-dialog-bgb')+'" id="' + this.id + '" style="'+(this.settings.boxStyle?this.settings.boxStyle:'')+'"></div>');
			this.dialogContainer = $("#" + this.id);
			var zIndex = this.settings.zIndex || 10;
			this.dialogContainer.css({
				"zIndex": zIndex
			});
			if (this.settings.className) {
				this.dialogContainer.addClass(this.settings.className)
			}
			this.mask.css({
				"zIndex": zIndex - 1
			});
			if (this.settings.closeTpl) {
				this.dialogContainer.append(this.settings.closeTpl)
			}
			if (this.settings.title) {
				this.dialogContainer.append(this.settings.titleTpl);
				this.settings.titleTpl.html(this.settings.title)
			}
			this.bindEvent();
			if (this.settings.show) {
				this.show()
			}
		},
		touch: function(obj, fn) {
			var move;
			$(obj).on("click", click);

			function click(e) {
				return fn.call(this, e)
			}
			$(obj).on("touchmove", function(e) {
				move = true
			}).on("touchend", function(e) {
				e.preventDefault();
				if (!move) {
					var returnvalue = fn.call(this, e, "touch");
					if (!returnvalue) {
						e.preventDefault();
						e.stopPropagation()
					}
				}
				move = false
			})
		},
		bindEvent: function() {
			var _this = this;
			if (this.settings.trigger) {
				$(this.settings.trigger).click(function() {
					_this.show()
				});
				_this.touch($(this.settings.trigger), function() {
					_this.show()
				})
			}
			$(this.dialogContainer).on("click", ".js-dialog-close", function() {
				_this.hide();
				return false
			});
			$(document).keydown(function(e) {
				if (e.keyCode === 27 && _this.showed) {
					_this.hide()
				}
			});
			$(this.dialogContainer).on("hide", function() {
				_this.hide()
			})
		},
		dispose: function() {
			this.dialogContainer.remove();
			this.mask.remove();
			this.timer && clearInterval(this.timer)
		},
		hide: function() {
			var _this = this;
			if (_this.settings.beforeHide) {
				_this.settings.beforeHide.call(_this, _this.dialogContainer)
			}
			this.showed = false;
			//this.mask.hide();
			this.timer && clearInterval(this.timer);
			if (this.settings.animate) {
				this.dialogContainer.removeClass("zoomIn").addClass("zoomOut");
				setTimeout(function() {
					_this.dialogContainer.hide();
					if (typeof _this.settings.target === "object") {
						$("body").append(_this.dialogContainer.hide())
					}
					if (_this.settings.afterHide) {
						_this.settings.afterHide.call(_this, _this.dialogContainer)
					}
				}, 500)
			} else {
				this.dialogContainer.hide();
				if (typeof this.settings.target === "object") {
					$("body").append(this.dialogContainer)
				}
				if (this.settings.afterHide) {
					this.settings.afterHide.call(this, this.dialogContainer)
				}
			}
			// ifFixed(false);
		},
		show: function() {
			// ifFixed(true);
			if (typeof this.settings.target === "string") {
				if (/^(\.|\#\w+)/gi.test(this.settings.target)) {
					this.dailogContent = $(this.settings.target)
				} else {
					this.dailogContent = $("<div>" + this.settings.target + "</div>")
				}
			} else {
				this.dailogContent = this.settings.target
			}
			this.mask.show();
			this.dailogContent.show();
			this.height = this.settings.height || "auto";
			this.width = this.settings.width || "auto";
			this.dialogContainer.append(this.dailogContent).show();
			if (this.settings.beforeShow) {
				this.settings.beforeShow.call(this, this.dialogContainer)
			}
			this.showed = true;
			$(this.settings.trigger).blur();
			this.setPosition();
			var _this = this;
			this.timer && clearInterval(this.timer);
			if (this.settings.fixed) {
				this.timer = setInterval(function() {
					_this.setPosition();
				}, 1000)
			}
			if (this.settings.animate) {
				this.dialogContainer.addClass("zoomIn").removeClass("zoomOut")
			}
		},
		setPosition: function() {
			if(this.settings.noSetPosition) return false;
			if (this.showed) {
				var _this = this;
				this.dialogContainer.show();
				this.height = this.settings.height;
				this.width = this.settings.width;
				if (isNaN(this.height)) {
					this.height = (this.dialogContainer.outerHeight && this.dialogContainer.outerHeight()) || this.dialogContainer.height()
				}
				if (isNaN(this.width)) {
					this.width = (this.dialogContainer.outerWidth && this.dialogContainer.outerWidth()) || this.dialogContainer.width()
				}
				var clientHeight = this.settings.clientHeight || document.documentElement.clientHeight || document.body.clientHeight;
				var clientWidth = this.settings.clientWidth || document.documentElement.clientWidth || document.body.clientWidth;
				var ml = this.width / 2;
				var mt = this.height / 2;
				var left = clientWidth/2-ml;
				var top = clientHeight / 2 - mt;
				left = Math.floor(Math.max(0, left));
				top = Math.floor(Math.max(0, top));
				var position = "fixed";
				if (_this.settings.fixed) {
					position = "fixed"
				}
				
				if(this.settings.fixedBottom) {
					_this.dialogContainer.addClass('ui-dialog-newTimeselect')
				} else {
					_this.dialogContainer.css({
						position: position,
						top: top,
						left: left
					})
				}
			}
		}
	};
	return Dialog
});